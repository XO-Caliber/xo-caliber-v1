generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  INDIVIDUAL
  FIRM
  ASSISTANT
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?

  resetPasswordToken       String?   @unique
  resetPasswordTokenExpiry DateTime?

  role Role @default(INDIVIDUAL)

  isEmailVerified        Boolean @default(false)
  emailVerificationToken String? @unique

  Firm       Firm?       @relation(fields: [firmId], references: [firmId])
  firmId     String?
  Assistants Assistant[]
  answer     Answer[]

  accounts Account[]
  sessions Session[]
  QANotes  String?   @db.Text
  Note     UserNote?

  FirmNote FirmNote?
}

model Firm {
  firmId String  @id @default(cuid())
  name   String?
  email  String  @unique
  image  String?

  assistant Assistant[]
  User      User[]
  userCount Int         @default(1)

  category   Category[]
  categoryId String?
  Note       FirmNote[]
}

model Assistant {
  assistantId String  @id @default(cuid())
  name        String?
  email       String  @unique
  image       String?

  firm   Firm?   @relation(fields: [firmId], references: [firmId])
  User   User[]
  firmId String?
}

model Admin {
  adminId String @id @default(cuid())
  name    String
  email   String @unique

  image String?

  hashedPassword String

  category   Category[]
  categoryId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Answers {
  YES
  NO
}

model Category {
  id        String     @id @default(cuid())
  name      String
  questions Question[]

  Firm    Firm?   @relation(fields: [firmId], references: [firmId])
  firmId  String?
  Admin   Admin?  @relation(fields: [adminId], references: [adminId])
  adminId String?
}

model Question {
  id         String   @id @default(cuid())
  question   String   @db.Text
  mark       Int
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String  @id @default(cuid())
  answer     Answers
  questionId String
  user       User    @relation(fields: [userId], references: [id])
  userId     String
}

model FirmNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  firm Firm @relation(fields: [firmId], references: [firmId])

  firmId String

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model UserNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
